{"text":"[{\"pos\":366,\"text\":\"This is John from caveofprogramming.com. \"},{\"pos\":6499,\"text\":\"We will look at a DAO factory within the data access object pattern. \"},{\"pos\":13400,\"text\":\"Since the last tutorial, I have taken the PersonDAO and filled in some SQL so it actually works. \"},{\"pos\":37224,\"text\":\"Also in my database I have got a log table as well as a people table so I have also created a LogDAO. \"},{\"pos\":62196,\"text\":\"Basically, to demonstrate this idea, we have a couple of DAOs now. \"},{\"pos\":79091,\"text\":\"We have LogDAO which deals with log table and PersonDAO that deals with person table. \"},{\"pos\":90738,\"text\":\"/n//n/To organize this a bit more, the DAO pattern can be like a pyramid with multiple layers some of which you may not have. \"},{\"pos\":103213,\"text\":\"If you wanted to add a new layer, you can create a factory which will create these DAO objects for us. \"},{\"pos\":115829,\"text\":\"/n//n/So I am going to create a new class DAOFactory. \"},{\"pos\":131602,\"text\":\"This will have a method getPersonDAO which will return a new PersonDAO and similarly we can have a getLogDAO. \"},{\"pos\":162783,\"text\":\"When we actually use these objects, in the controller. \"},{\"pos\":183397,\"text\":\"Now instead of code which works with PersonDAO for example, this code can use DAOFactory. \"},{\"pos\":203148,\"text\":\"The methods have to be /b/static/. \"},{\"pos\":222648,\"text\":\"/n//n/I have a class called Model I started with and I am not using it. \"},{\"pos\":227183,\"text\":\"I will go on to use that class in a future tutorial, but I want to point out that a lot of this depends on what you need to do. \"},{\"pos\":240086,\"text\":\"A lot of programs wouldn't have a class called Model, and if it did it would be some /i/specific model/. \"},{\"pos\":248250,\"text\":\"It might even have multiple model classes. \"},{\"pos\":259752,\"text\":\"Think of the model /i/as a package, and not a particular class/. \"},{\"pos\":267380,\"text\":\"The controller uses the model, so it uses classes from the model package. \"},{\"pos\":275270,\"text\":\"It is not necessarily the case that the controller is just going to work with the Model class. \"},{\"pos\":317759,\"text\":\"So the different bits of the application - model, view and controller - each of them are not normally one class. \"},{\"pos\":328695,\"text\":\"They are more like packages. \"}]","css":"","videoid":"5HGe9s9qM-o","title":"DAO Factories: Java Design Patterns Part 13","duration":394.241,"category":"Java Design Patterns","pageName":"dao_factory.html"}