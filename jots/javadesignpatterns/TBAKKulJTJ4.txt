{"text":"[{\"pos\":337,\"text\":\"This is John from caveofprogramming.com. \"},{\"pos\":5282,\"text\":\"And this is a tutorial on the factory pattern in Java. \"},{\"pos\":10494,\"text\":\"I am in Eclipse and I have a main method set up already here. \"},{\"pos\":39252,\"text\":\"/n//n/This is basically for use in a situation where you want to create lots of objects. \"},{\"pos\":50935,\"text\":\"Or you want to create one of several possible objects which /i/all implement the same interface or derive from the same parent/.\"},{\"pos\":79036,\"text\":\"It is complicated to create these objects since you have to make some kind of complex choice when deciding which of these objects to instantiate. \"},{\"pos\":97765,\"text\":\"A good example - /b/lots of constructor parameters/. \"},{\"pos\":122014,\"text\":\"If it is possible to categorize the objects or specify in a simple way, use factory pattern. \"},{\"pos\":145265,\"text\":\"/n//n/Let us look at some examples.&nbsp;\"},{\"pos\":181265,\"text\":\"/n//n/This is a very very important pattern and often in interviews and exams you often get asked about the factory pattern. \"},{\"pos\":208366,\"text\":\"The DAO pattern often uses the dao factory. \"},{\"pos\":221615,\"text\":\"It is not so easy to find the factory pattern in the Java API but one which comes to mind is BorderFactory. \"},{\"pos\":229585,\"text\":\"If you have used Swing, you know what this is. \"},{\"pos\":239835,\"text\":\"If you have a Swing application which has borders around them and the borders could be described in different ways. \"},{\"pos\":264571,\"text\":\"BorderFactory has factory methods which you call and they return something that implements the Border Interface. \"},{\"pos\":284187,\"text\":\"These factory methods are /b/manufacturing objects/ that all implement this interface. \"},{\"pos\":356561,\"text\":\"/n//n/Let us take a look at a simple example of implementing the Factory pattern. \"},{\"pos\":362461,\"text\":\"I will consider a somewhat silly examples. \"},{\"pos\":374198,\"text\":\"We are modeling a bunch of different animals in software. \"},{\"pos\":402198,\"text\":\"Create an interface called Animal and let us specify some methods like speak(). \"},{\"pos\":432448,\"text\":\"I will have a couple of objects which implement them. \"},{\"pos\":450198,\"text\":\"Let us start with Dog class which implements Animal and add the speak method. \"},{\"pos\":476198,\"text\":\"I will also have a Cat class. \"},{\"pos\":509198,\"text\":\"Now these are very simple to construct and don't have any overloaded constructors. \"},{\"pos\":524421,\"text\":\"Imagine that this class requires lots of configuration before use e.g. via constructor parameters. \"},{\"pos\":554882,\"text\":\"/n//n/We can simplify this using the Factory pattern. \"},{\"pos\":566382,\"text\":\"Let us create a new class called AnimalFactory. \"},{\"pos\":589382,\"text\":\"We can make the class abstract (optional). \"},{\"pos\":603383,\"text\":\"Let us have a method createAnimal(). \"},{\"pos\":628132,\"text\":\"In the BorderFactory example, we see that it has lots of different methods, and sometimes they take parameters. \"},{\"pos\":667326,\"text\":\"/n//n/Sometimes one method in your Factory which takes an int or enum to specify what object you are creating. \"},{\"pos\":696326,\"text\":\"Often you see that the Factory pattern using public static final int to configure the method, not enum. \"},{\"pos\":731352,\"text\":\"We can make createAnimal take an int and switch on the type and create the objects. \"},{\"pos\":756602,\"text\":\"This will usually be more complex in a real example - maybe making a tricky decision. \"},{\"pos\":790904,\"text\":\"Now to use this I go to my App and call Animal animal = AnimalFactory.createAnimal(AnimalFactory.CAT)\"},{\"pos\":876904,\"text\":\"/n//n/Thats the basic idea behind factory pattern - there are lots of variations on this. \"},{\"pos\":882323,\"text\":\"The basic idea is just sort of static method which takes some parameter and it goes through a decision process and returns an object of the appropriate type. \"},{\"pos\":932897,\"text\":\"It is common to make the class name AbstractAnimal. \"},{\"pos\":1063002,\"text\":\"/n/We will look at further patterns later in the series. \"}]","css":"","videoid":"TBAKKulJTJ4","title":"Factory Pattern: Java Design Patterns Part 17","duration":1110.961,"category":"Java Design Patterns","pageName":""}