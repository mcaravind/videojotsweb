{"text":"[{\"pos\":19886,\"text\":\"In this episode we will learn about yet another higher order function, reduce. \"},{\"pos\":26029,\"text\":\"/n/<span class=\\\"t\\\">Why should you learn reduce?</span>\"},{\"pos\":58196,\"text\":\"<span class=\\\"t\\\">What is reduce?</span>\"},{\"pos\":66445,\"text\":\"Recap - map, filter - they transformed a list into something else. \"},{\"pos\":101695,\"text\":\"Another example is find (not mentioned before). \"},{\"pos\":120945,\"text\":\"What to do if you cannot find one that fits? That is where reduce comes in. \"},{\"pos\":134347,\"text\":\"/n/Reduce is not specific - it is a multi-tool of list transformations. It can be used to express any list transformation. \"},{\"pos\":160827,\"text\":\"Reduce is the super list transformation that you can fall back on if you can't find a prebuilt one. \"},{\"pos\":188339,\"text\":\"/n/<span class=\\\"t\\\">Start demo</span>\"},{\"pos\":195839,\"text\":\"We want to summarize all the amounts. \"},{\"pos\":201173,\"text\":\"/n//i/With a for loop/\"},{\"pos\":232408,\"text\":\"/n/<span class=\\\"t\\\">Using reduce</span>\"},{\"pos\":251158,\"text\":\"Just like map or filter, reduce is a function on the array object and takes a callback function. \"},{\"pos\":266464,\"text\":\"But unlike map and filter, it wants an object. \"},{\"pos\":278214,\"text\":\"The object can be thought of as a starting point. \"},{\"pos\":285692,\"text\":\"The sum can be passed as the first argument. \"},{\"pos\":295833,\"text\":\"The iterated item will be the second argument. \"},{\"pos\":317413,\"text\":\"This return value will in turn be passed as the sum in the next iteration. \"},{\"pos\":326410,\"text\":\"Which in turn will do the same operation and so on... \"},{\"pos\":362132,\"text\":\"/n//i/Inspecting the output in the console/\"},{\"pos\":421382,\"text\":\"/n//n/Let us compare this with the for loop. \"},{\"pos\":448632,\"text\":\"The difference in code size is not as dramatic as before. \"},{\"pos\":485632,\"text\":\"With arrow functions, we can make the code size even smaller. \"},{\"pos\":525654,\"text\":\"/n//n/The example was extremely basic and doesn't showcase the extreme power of reduce. \"},{\"pos\":537648,\"text\":\"So I spend the next episode on reduce as well. \"}]","css":".t{font-weight:bold;}.t:before{content:\"\\A\";white-space: pre;}.t:after{content:\"\\A\";white-space: pre;}","videoid":"Wl98eZpkp-c","title":"Reduce basics - Part 3 of Functional Programming in JavaScript","duration":578.621,"category":"Functional Programming in JavaScript"}