{"text":"[{\"pos\":1068,\"text\":\"What is currying?\"},{\"pos\":3399,\"text\":\"Currying is what a function doesn't take all of its arguments up front. \"},{\"pos\":10246,\"text\":\"Instead, it wants you to give it the first argument and then the function returns another function which you are supposed to call with the second argument. \"},{\"pos\":22612,\"text\":\"And it continues, until all the arguments have been provided and then the function at the end of the chain will be the one which returns the value that you actually want. \"},{\"pos\":51367,\"text\":\"/n/<span class=\\\"t\\\">Start of demo</span>\"},{\"pos\":55017,\"text\":\"This function is not curried. \"},{\"pos\":60343,\"text\":\"It takes a name, a size and an element and returns a string. \"},{\"pos\":85838,\"text\":\"/n/Here is the same function in the curried version. \"},{\"pos\":110611,\"text\":\"/n//i/Calling the function/\"},{\"pos\":121861,\"text\":\"/n/Remember dragon will take a name and it will return another function which takes a size, which in turn returns a third function which takes an element. \"},{\"pos\":160813,\"text\":\"/n/The idea with currying is that your function can pass through the application and gradually receive the arguments that it needs. \"},{\"pos\":221262,\"text\":\"/n/Our function is written from the start to be curryable, but every functional library worth its salt has a way of making non-curryable functions curryable. \"},{\"pos\":235233,\"text\":\"/n/<span class=\\\"t\\\">Using lodash to make the dragon function curryable</span>\"},{\"pos\":273282,\"text\":\"dragon = _.curry(dragon)\"},{\"pos\":290721,\"text\":\"/n/Why is currying useful?\"},{\"pos\":293066,\"text\":\"/n/<span class=\\\"t\\\">Improving existing code with currying</span>\"},{\"pos\":388954,\"text\":\"Let us improve with currying. \"}]","css":".t{font-weight:bold;}.t:before{content:\"\\A\";white-space: pre;}.t:after{content:\"\\A\";white-space: pre;}","videoid":"iZLP4qOwY8I","title":"Currying - Part 6 of Functional Programming in JavaScript","duration":527.661,"category":"Functional Programming in JavaScript","pageName":"part6_currying.html"}