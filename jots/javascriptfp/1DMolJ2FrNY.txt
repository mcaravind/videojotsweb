{"text":"[{\"pos\":37033,\"text\":\"Last time I showed you a basic example of reduce, where we used it to sum the property of a series of objects. \"},{\"pos\":49836,\"text\":\"It is not limited to reducing a list to a number. \"},{\"pos\":52407,\"text\":\"It can reduce it to anything - such as an array or an object. \"},{\"pos\":61841,\"text\":\"I am also going to throw a couple of other higher order functions into the mix. \"},{\"pos\":73079,\"text\":\"/n/<span class=\\\"t\\\">Start of demo</span>\"},{\"pos\":83662,\"text\":\"This is a tab separated file. \"},{\"pos\":102667,\"text\":\"We are going to turn it into a object literal. \"},{\"pos\":117912,\"text\":\"The key will be the name. \"},{\"pos\":127661,\"text\":\"The order items goes in an array. \"},{\"pos\":169784,\"text\":\"Because we are dealing with a file, we need to import fs namespace from node. \"},{\"pos\":200784,\"text\":\"To read from file, we use fs.readFileSync. \"},{\"pos\":241417,\"text\":\"/n/We get a buffer as output. \"},{\"pos\":249668,\"text\":\"We expect the contents of the file. \"},{\"pos\":262030,\"text\":\"To show the text, it needs a mapping - an encoding table. \"},{\"pos\":273847,\"text\":\"The most common is utf-8. \"},{\"pos\":283780,\"text\":\"/n/<span class=\\\"t\\\">Splitting into an array</span>\"},{\"pos\":293031,\"text\":\"Splits the string into an array. \"},{\"pos\":306031,\"text\":\"We see an array of strings. \"},{\"pos\":306804,\"text\":\"The extra line is due to the final break, we get rid of that by calling trim()\"},{\"pos\":332665,\"text\":\"/n/Before we start using reduce on these lines, I would like to convert them into a more manageable object for using a map. \"},{\"pos\":350636,\"text\":\"I am going to map every line and split on tab characters. \"},{\"pos\":366436,\"text\":\"We now have an array of arrays. \"},{\"pos\":376686,\"text\":\"/n/<span class=\\\"t\\\">Lets reduce it</span>\"},{\"pos\":381186,\"text\":\"Reduce takes two arguments - first, a function and then a starting object. \"},{\"pos\":394186,\"text\":\"Last time we used a number as starting object. \"},{\"pos\":395208,\"text\":\"This time we will use an object literal. \"},{\"pos\":406420,\"text\":\"/n//n/Reduce needs two arguments - the first one is the object we are constructing. \"},{\"pos\":421531,\"text\":\"The second argument is the thing we are iterating, in this case the line. \"},{\"pos\":473113,\"text\":\"Let me console.log the line out. \"},{\"pos\":503573,\"text\":\"Lets get rid of console.log and rename to customers. \"},{\"pos\":515824,\"text\":\"For every customer, we are going to make a property with their name. \"},{\"pos\":559588,\"text\":\"Now we want to append order id.\"},{\"pos\":582589,\"text\":\"We want the price, the third part of the line. \"},{\"pos\":591838,\"text\":\"The quantity is the fourth part of the line. \"},{\"pos\":603166,\"text\":\"/n//n/Use JSON.stringify to print the output nicely. \"},{\"pos\":658310,\"text\":\"Let us reuse the existing array to avoid overwriting. \"},{\"pos\":682559,\"text\":\"We are done. \"},{\"pos\":687059,\"text\":\"We looked at a more advanced reduce example.\"},{\"pos\":695723,\"text\":\"We also see some chaining. \"},{\"pos\":717309,\"text\":\"The chainability is something you will see a lot of in functional programming. \"}]","css":".t{font-weight:bold;}.t:before{content:\"\\A\";white-space: pre;}.t:after{content:\"\\A\";white-space: pre;}","videoid":"1DMolJ2FrNY","title":"Reduce Advanced - Part 4 of Functional Programming in JavaScript","duration":802.141,"category":"Functional Programming in JavaScript","pageName":"part4_reduce.html"}