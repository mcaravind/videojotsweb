{"text":"[{\"pos\":11681,\"text\":\"Thanks for joining. I am Matthew McCullogh and I have Brent Beer with me offering tons of advice as we go through these materials. \"},{\"pos\":31721,\"text\":\"I am going to demonstrate a lot of the things which makes Git and GitHub such a useful tool. \"},{\"pos\":37941,\"text\":\"I am a developer by trade, and have worked in Java and Objective-C and MFC and assorted things. \"},{\"pos\":47281,\"text\":\"I say from my own experience as a developer and not just a teacher that this is an amazing transformation for me. \"},{\"pos\":70661,\"text\":\"/n//i/Reaching Matt and Brent./\"},{\"pos\":106761,\"text\":\"/n//i/Matt's background/\"},{\"pos\":131761,\"text\":\"/n//i/Brent's background/\"},{\"pos\":160261,\"text\":\"/n/We are here for talking about git and GitHub today. \"},{\"pos\":189580,\"text\":\"/n//i/Roadmap for this presentation/\"},{\"pos\":217840,\"text\":\"/n/<span class=\\\"t\\\">Why Git?</span>\"},{\"pos\":244840,\"text\":\"Why invest time in learning a new tool?\"},{\"pos\":256080,\"text\":\"Someone has already paved the way - BitKeeper story. \"},{\"pos\":298340,\"text\":\"Git adds all of the attributes of distributed version control systems. \"},{\"pos\":309540,\"text\":\"It works in both on-machine as well as a centralized repo model. \"},{\"pos\":333602,\"text\":\"/n/Git is one of the version control systems that has been developed in the internet era - it works very well with high latency and constrained bandwidth networks. \"},{\"pos\":380742,\"text\":\"Git has a very /b/small footprint./ \"},{\"pos\":389742,\"text\":\"/n/Git is also /b/simple/.\"},{\"pos\":407742,\"text\":\"It means it is simple to /i/get started./\"},{\"pos\":410682,\"text\":\"But there is a massive amount of stuff to learn. \"},{\"pos\":437683,\"text\":\"/n/From its Unix and Linux roots - it is also /b/composable./\"},{\"pos\":444584,\"text\":\"Git is built of very small programs that work very well together to give the appearance of a suite of tools. \"},{\"pos\":456663,\"text\":\"Since the little pieces are still exposed to you, you can compose these with scripts and write your own new git instructions. \"},{\"pos\":478023,\"text\":\"/n/<span class=\\\"t\\\">Setting up Git</span>\"},{\"pos\":497283,\"text\":\"It is just running an installer. An even more raw way to do that is to just copy the binaries to your $PATH variable. \"},{\"pos\":518723,\"text\":\"No admin privileges required. \"},{\"pos\":525763,\"text\":\"We have a page that we maintain at GitHub that shows you how to set up Git for different platforms. \"},{\"pos\":554164,\"text\":\"/n/I have got it already set up on my machine. \"},{\"pos\":568023,\"text\":\"/n/Type git --version for showing version. \"},{\"pos\":609783,\"text\":\"/n/<span class=\\\"t\\\">Using Git</span>\"},{\"pos\":634283,\"text\":\"I want to start by emphasizing that this is a command line tool. \"},{\"pos\":647583,\"text\":\"This is important as you work more towards continuous integration and continuous delivery model of shipping your software. \"},{\"pos\":679903,\"text\":\"/n/<span class=\\\"t\\\">Create a Git repository</span>\"},{\"pos\":681963,\"text\":\"This is an absolute inversion of the usual way of thinking about version control. \"},{\"pos\":719423,\"text\":\"I will create the repository locally, and push it to the network later. In the centralized VCS systems, you need to fetch the repository from the network, and usually only after getting sufficient privileges. \"},{\"pos\":753723,\"text\":\"/n/<span class=\\\"t\\\">Some instructions</span>\"},{\"pos\":755283,\"text\":\"/co/git init project1/\"},{\"pos\":765184,\"text\":\"Instantaneously create a local repository but with no server or any daemon running in the background. \"},{\"pos\":801244,\"text\":\"/n//co/tree .git/ Poke inside the .git file. \"},{\"pos\":820824,\"text\":\"I have .git a folder, with some files in it. Those are lifecycle management and instructions that I can hook into with Ruby, Perl, Python or shell scripts. \"},{\"pos\":847104,\"text\":\"I have a series of directories info, objects and refs - those are where the actual data for the commits - the version control timestamped copies of the repository are stored. \"},{\"pos\":867224,\"text\":\"There is one and only one .git folder per repository and it is at the top level of the project. \"},{\"pos\":877364,\"text\":\"It does not repeat .git directories down all of your other folders and in fact, if you ever wanted to ungit version, just delete the .git folder. \"},{\"pos\":905505,\"text\":\"/n//co/git status/\"},{\"pos\":915505,\"text\":\"Initial commit on a default branch called master. \"},{\"pos\":919745,\"text\":\"Nothing to commit yet. \"},{\"pos\":921244,\"text\":\"Lets open up a text editor and create a file first.txt. \"},{\"pos\":945004,\"text\":\"I have added some lorem ipsum text into the file. \"},{\"pos\":954725,\"text\":\"/n/Do a git status again. \"},{\"pos\":966225,\"text\":\"git tracks content - it is examining current working directory and all directories beneath it to see if any file has been modified or appears like it has never seen before. \"},{\"pos\":985865,\"text\":\"/n//co/git add first.txt/\"},{\"pos\":992185,\"text\":\"But adding this file to version control is still is different than version control today. \"},{\"pos\":1002925,\"text\":\"Adding it is merely indicating that we want it to participate in the next transactional changeset. \"},{\"pos\":1011045,\"text\":\"git add is a suggestion to have this participate but not yet a permanent record of that file. \"},{\"pos\":1029985,\"text\":\"/n//co/git commit -m \\\"My first commit\\\"/\"},{\"pos\":1048745,\"text\":\"It says I have made a commit to the master branch (m), it is the root commit, it has a globally unique identifier (on screen) and it is my first commit as the commit message. \"},{\"pos\":1089185,\"text\":\"This file is now a permanent part of version control and git status will report I have nothing to commit and the working directory is clean. \"},{\"pos\":1097725,\"text\":\"I emphasize that nothing is running in the background. \"},{\"pos\":1138985,\"text\":\"/n/<span class=\\\"t\\\">Graphical user interface</span>\"},{\"pos\":1177225,\"text\":\"There is absolute symmetry - everything is committed to disk in the .git folder from GUIs to the command line. \"},{\"pos\":1187885,\"text\":\"Everything about the git repository is stored in that single .git folder. \"},{\"pos\":1222305,\"text\":\"/n//i/Pro Git book - link/\"},{\"pos\":1263565,\"text\":\"/n//i/For other class notes and instructions - teach.github.com/\"},{\"pos\":1299565,\"text\":\"/n//i/To get help help.github.com/\"},{\"pos\":1332725,\"text\":\"/n/<span class=\\\"t\\\">Create a repo</span>\"},{\"pos\":1340985,\"text\":\"Using FireFox and Chrome - two browsers. \"},{\"pos\":1362725,\"text\":\"They are signed in as different accounts. \"},{\"pos\":1372985,\"text\":\"This will show real world use case where I am manipulating two different repositories. \"},{\"pos\":1450705,\"text\":\"/n/Click a create a new repository. \"},{\"pos\":1475205,\"text\":\"Call it project1. \"},{\"pos\":1482205,\"text\":\"Make it a public repo. \"},{\"pos\":1491205,\"text\":\"Create the repository. \"},{\"pos\":1495845,\"text\":\"The instructions show how you push and preserve local work up to centralized repository. \"},{\"pos\":1514325,\"text\":\"/n/<span class=\\\"co\\\">git remote add origin  https://github.com/githubstudent/project1.git</span>\"},{\"pos\":1517726,\"text\":\"/n/<span class=\\\"co\\\">git push -u origin master</span>\"},{\"pos\":1518647,\"text\":\"It added a remote - registering a bookmark for that long address that represents the github destination. \"},{\"pos\":1527507,\"text\":\"And then it pushes - git's verb for transmitting the contents of the local repository to some other place. \"},{\"pos\":1549927,\"text\":\"And that repository has been transmitted and you now see that it says a new branch has been transmitted. \"},{\"pos\":1577307,\"text\":\"It preserves and maintains the work done on the local work when you pushed. \"},{\"pos\":1593947,\"text\":\"When you push, it simply is synchronizing the local activities up to a central repository. \"},{\"pos\":1612387,\"text\":\"/n/<span class=\\\"t\\\">Joining and participating in a project that already exists</span>\"},{\"pos\":1638727,\"text\":\"Read-only access to the repo is sufficient. You simply begin helping and later ask for the permission for your code to be folded in once you made a meaningful contribution. \"},{\"pos\":1668327,\"text\":\"/n/Click fork - makes a copy to your personal namespace (my personal account). \"},{\"pos\":1703327,\"text\":\"When we make changes to the fork, you can offer it back to the project. \"},{\"pos\":1720087,\"text\":\"/n//co/git clone &lt;address&gt;/\"},{\"pos\":1746087,\"text\":\"Change directory to repo. \"},{\"pos\":1754587,\"text\":\"You can do git status and get info on all history and all branches from local disk. \"},{\"pos\":1756227,\"text\":\"/n//co/git branch -a/\"},{\"pos\":1762727,\"text\":\"Show me all branch names\"},{\"pos\":1781167,\"text\":\"/n//co/git branch &lt;name&gt;/ Creates a branch\"},{\"pos\":1795427,\"text\":\"/n//co/git checkout &lt;name&gt;/\"},{\"pos\":1797607,\"text\":\"Instruction for toggling to a branch. \"},{\"pos\":1809347,\"text\":\"That switches the entire contents of my local directory to represent, to be and to have the state of the &lt;name&gt; branch. \"},{\"pos\":1825008,\"text\":\"No difference between master and newly created branch at this point. \"},{\"pos\":1888068,\"text\":\"/n/I am going to create a file while on the new branch. \"},{\"pos\":1916188,\"text\":\"You see the new file in Finder view.\"},{\"pos\":1928568,\"text\":\"/n/Ask git status. \"},{\"pos\":1935828,\"text\":\"Do a git add of brand new file. \"},{\"pos\":1944068,\"text\":\"Then do a git commit with a new commit message. \"},{\"pos\":1957568,\"text\":\"Its not yet up on github.com. \"},{\"pos\":1964068,\"text\":\"You still need to push. \"},{\"pos\":1965788,\"text\":\"/n//co/git push -u origin &lt;branchname&gt;/\"},{\"pos\":1974209,\"text\":\"I am deciding to publish, for the very first time, this new branch. \"},{\"pos\":1978069,\"text\":\"This is an opt-in process. \"},{\"pos\":1991569,\"text\":\"Why opt-in? \"},{\"pos\":1992029,\"text\":\"The idea is to create branches for just about any small thing you want to do. \"},{\"pos\":1999609,\"text\":\"Bug fix, long lived feature branch - and then contain the work. \"},{\"pos\":2016369,\"text\":\"/n//co/git checkout master/\"},{\"pos\":2028889,\"text\":\"Watch the new file disappear from Finder view. \"},{\"pos\":2040649,\"text\":\"This helps get the mental model - when you checkout a branch, it is updating the file system to reflect the state of that branch. \"},{\"pos\":2054129,\"text\":\"When you checkout a branch, all files become up to date with that exact branch that you checked out. \"},{\"pos\":2084909,\"text\":\"/n/On GitHub you can see the new branch created. \"},{\"pos\":2094489,\"text\":\"It is 1 commit ahead of everything else done in the project. \"},{\"pos\":2117729,\"text\":\"I will offer the new file to the central project maintainer. Click on the pull request button. \"},{\"pos\":2124529,\"text\":\"The pull request is a fundamental unit of work on the GitHub side of things. \"},{\"pos\":2152529,\"text\":\"This pull request is offering my change into the core project maintainer. \"},{\"pos\":2167228,\"text\":\"/n/<span class=\\\"t\\\">Note the phrase: Why is it a pull request and not a push request?</span>\"},{\"pos\":2177709,\"text\":\"The permissions model is inverted. \"},{\"pos\":2185209,\"text\":\"I can make whatever change I wish to the project without asking for the right to contribute. But, those changes are not folded in until the core maintainers decide to bring them in. \"},{\"pos\":2203609,\"text\":\"I will add a comment describing why this code should be brought in. \"},{\"pos\":2227229,\"text\":\"The commits tab shows which units of work I am offering in. \"},{\"pos\":2233569,\"text\":\"On the files change, I can see the summary of the code. \"},{\"pos\":2240009,\"text\":\"With the pull request I am going to send this in and queue it up for the project maintainer to potentially act on. \"},{\"pos\":2256649,\"text\":\"/n/I am going to the list of pull requests, as a maintainer. \"},{\"pos\":2286689,\"text\":\"I am going to merge this pull request and fold it into the core of the project. \"},{\"pos\":2323149,\"text\":\"/n/Give everyone privilege to issue pull requests. \"},{\"pos\":2343149,\"text\":\"You can reject them, you can approve them, you can also debate with the contributors. \"},{\"pos\":2376649,\"text\":\"Rather than outright rejecting change, I can fire a message to author of pull request. \"},{\"pos\":2465789,\"text\":\"/n/Close a request without accepting the changes - with comment. \"},{\"pos\":2510750,\"text\":\"/n/<span class=\\\"t\\\">Git GUIs</span>\"},{\"pos\":2519750,\"text\":\"A lot of GUI choices are available. \"},{\"pos\":2712630,\"text\":\"/n/<span class=\\\"t\\\">GitHub social coding</span>\"},{\"pos\":2724130,\"text\":\"Social coding\"},{\"pos\":2730130,\"text\":\"/n/Fork and pull model\"},{\"pos\":2752990,\"text\":\"/n/A picture to visualize the way social coding works\"},{\"pos\":2846490,\"text\":\"/n/Web based image diff.&nbsp;\"},{\"pos\":2925110,\"text\":\"A difference engine to highlight small things.\"},{\"pos\":2972610,\"text\":\"/n/GitHub enterprise: run your own copy of GitHub inside your firewall. \"}]","css":".t{font-weight:bold;}.t:before{content:\"\\A\";white-space: pre;}.t:after{content:\"\\A\";white-space: pre;}\n.co{background-color: #d9534f;display: inline;padding: .2em .6em .3em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;vertical-align: baseline;border-radius: .25em;box-sizing: border-box; margin-right:5px;}","videoid":"U8GBXvdmHT4","title":"Webcast • The Basics of Git and GitHub • July 2013","duration":3063.199410430839,"category":"GitHub Training"}