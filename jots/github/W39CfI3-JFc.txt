{"text":"[{\"pos\":641,\"text\":\"My name is Jordan McCullough and I am part of the GitHub training team. \"},{\"pos\":35660,\"text\":\"Lets get things started by creating a repository.\"},{\"pos\":75400,\"text\":\"Go to account and create a brand new repository. \"},{\"pos\":87660,\"text\":\"I am going to call this a free class. \"},{\"pos\":109060,\"text\":\"Provide a description \"},{\"pos\":135820,\"text\":\"The other thing is to keep this repo public. \"},{\"pos\":153320,\"text\":\"Initialize with README. \"},{\"pos\":212560,\"text\":\"Apply a license. \"},{\"pos\":261560,\"text\":\"Update the README title. \"},{\"pos\":282060,\"text\":\"Add a subtitle. \"},{\"pos\":321300,\"text\":\"Commit with commit message. \"},{\"pos\":329560,\"text\":\"On the GitHub platform, any text file that ends with .md uses MarkDown format. \"},{\"pos\":361540,\"text\":\"Add a couple of edits to generate some history. \"},{\"pos\":390081,\"text\":\"/n//n//i/A bullet list of topics to be reviewed./\"},{\"pos\":468321,\"text\":\"/n//n/Now I am ready to bring it down locally. \"},{\"pos\":543841,\"text\":\"Easiest way is to use \\\"Clone in Desktop\\\" button. \"},{\"pos\":566341,\"text\":\"Specify a path to save the repo on local. \"},{\"pos\":602341,\"text\":\"When I performed a clone, GitHub's client made a copy of everything going on in the project. \"},{\"pos\":629961,\"text\":\"The commits, the history, all versions of the file which live in this. \"},{\"pos\":653941,\"text\":\"I can confirm that by taking a look at the history in the GitHub client. \"},{\"pos\":814561,\"text\":\"/n//n/I have these local repos, the one of interest being the free class. \"},{\"pos\":844401,\"text\":\"I want to show this to you in the Finder. \"},{\"pos\":861641,\"text\":\"I go to terminal and do some stuff with git.\"},{\"pos\":885281,\"text\":\"Change directory to a git repo project. \"},{\"pos\":895601,\"text\":\"/n//n//co/git status/\"},{\"pos\":902881,\"text\":\"Confirms the repo and if I have any existing modifications. \"},{\"pos\":911801,\"text\":\"/n//n/I edit the readme.md file.\"},{\"pos\":935541,\"text\":\"I will save the file with the modifications. \"},{\"pos\":955981,\"text\":\"/n//n//co/git diff/\"},{\"pos\":962481,\"text\":\"Git shows what is missing. \"},{\"pos\":975161,\"text\":\"/n//n//co/git add ./\"},{\"pos\":977041,\"text\":\"Stage the file. \"},{\"pos\":977981,\"text\":\"/n//n//co/git commit -m 'Remove extra content'/\"},{\"pos\":980602,\"text\":\"Commit the file. \"},{\"pos\":1033102,\"text\":\"/n//n//co/git commit --amend -m \\\"Remove extra text and divider line\\\"/\"},{\"pos\":1066102,\"text\":\"Revise the last commit. \"},{\"pos\":1100602,\"text\":\"/n/Now I introduce some other change. \"},{\"pos\":1107102,\"text\":\"But I don't want the change. \"},{\"pos\":1133842,\"text\":\"I can recover it in a couple of ways. \"},{\"pos\":1172601,\"text\":\"/n//n//co/git log --oneline/\"},{\"pos\":1177121,\"text\":\"Will show same commit history as on graphical client but just on the terminal instead. \"},{\"pos\":1188181,\"text\":\"Hit Q to leave or drop out of this. \"},{\"pos\":1189521,\"text\":\"Notice that commits are identified by commit refs - hexadecimal values. \"},{\"pos\":1205221,\"text\":\"I wish the last commit never happened at all. \"},{\"pos\":1210201,\"text\":\"Let me identify the place to go back to - where I would like to recover to. \"},{\"pos\":1234361,\"text\":\"Copy the commit ref. \"},{\"pos\":1240861,\"text\":\"/n//co/git reset commitid/\"},{\"pos\":1251381,\"text\":\"Reset's the history.&nbsp;\"},{\"pos\":1262861,\"text\":\"I have now thrown away the commits. \"},{\"pos\":1286981,\"text\":\"/n/Say I did not want to lose the changes, I just wanted to destroy the commits themselves. \"},{\"pos\":1311661,\"text\":\"/n/The changes now appear in the graphical client as if they had just occurred. \"},{\"pos\":1331121,\"text\":\"And as if I have never versioned those modifications. \"},{\"pos\":1393021,\"text\":\"/n//n//co/git log --all --decorate --oneline/\"},{\"pos\":1406521,\"text\":\"I want to see what history is on GitHub. \"},{\"pos\":1413301,\"text\":\"And what history do I have just local and specific to my machine keeping in mind git is distributed in nature, and that unless we tell git to communicate with a remote repository (github.com in this case) these commits are only sitting on hard drive. \"},{\"pos\":1446561,\"text\":\"Also these commit refs are not the most friendly thing to refer to - they are verbose. \"},{\"pos\":1482361,\"text\":\"Let us discard any commit made locally. \"},{\"pos\":1512141,\"text\":\"/n//n/<span class=\\\"co\\\">git reset --hard origin/master</span>\"},{\"pos\":1535262,\"text\":\"Reset back to branch that represents the last time we communicated with github for this repository. \"},{\"pos\":1574102,\"text\":\"/n/Maybe you accidentally ran the hard reset and lost more changes than you wanted. \"},{\"pos\":1620882,\"text\":\"/n//n//co/git reflog/\"},{\"pos\":1627882,\"text\":\"git keeps a history of your interaction with the repo for your local copy only. \"},{\"pos\":1635002,\"text\":\"This is never transmitted to the repo on github.com. \"},{\"pos\":1645763,\"text\":\"I can see the last 7 commits, the 7 interactions with my repo locally. \"},{\"pos\":1685983,\"text\":\"Even though my git log doesn't show all those other commits, git has actually stored them in the background for us. \"},{\"pos\":1700523,\"text\":\"We can get back to them if we really need to recover. \"},{\"pos\":1708483,\"text\":\"/n/I am going to generate some random changes. \"},{\"pos\":1760483,\"text\":\"I would like to bundle them into one commit. \"},{\"pos\":1764723,\"text\":\"/n/git reset origin/master\"},{\"pos\":1827463,\"text\":\"/n/Now you see the 5 files changed. \"},{\"pos\":1840203,\"text\":\"Now you can commit all at once. \"},{\"pos\":1859203,\"text\":\"Now I will publish it to github. \"},{\"pos\":1894463,\"text\":\"/n/You shouldn't have committed those files - don't reset any history which has been shared with others. \"},{\"pos\":1910383,\"text\":\"Other developers may rely upon this commit. \"},{\"pos\":1923743,\"text\":\"There is a unspoken rule, once you publish the repo, you never use the reset command on that commit. \"},{\"pos\":1949123,\"text\":\"/n/How would I create a new commit which removes them? \"},{\"pos\":1957323,\"text\":\"/n//n//co/git revert commitref/\"},{\"pos\":1991823,\"text\":\"Why is that bad? \"},{\"pos\":1993643,\"text\":\"Revert creates a new commit marker which simply does the inverse of what happened. \"},{\"pos\":2028983,\"text\":\"In my file system I don't have the files in my working tree. \"},{\"pos\":2093243,\"text\":\"/n/I will bring up reflog again. \"},{\"pos\":2129903,\"text\":\"/n/Imagine we want 7 more commits. \"},{\"pos\":2162643,\"text\":\"They are not on GitHub yet. \"},{\"pos\":2175643,\"text\":\"/n//n/<span class=\\\"co\\\">git rebase -i origin/master</span>\"},{\"pos\":2191044,\"text\":\"You need to revise what happened to a safe point in time. \"},{\"pos\":2205544,\"text\":\"I want to go back to a point in which I do not override or rewrite history that has been shared with others. \"},{\"pos\":2282664,\"text\":\"Rebase shows oldest at top and newest at bottom. \"},{\"pos\":2305664,\"text\":\"/n/Maybe I don't want any commits that have even numbered files. \"},{\"pos\":2317684,\"text\":\"I will delete the lines representing even numbered files. \"},{\"pos\":2321824,\"text\":\"I save that. It says rebase updated master. \"},{\"pos\":2370064,\"text\":\"If you rebase interactive again, now my history since I last interacted with github.com - I only have commits with odd numbered files. \"},{\"pos\":2384264,\"text\":\"/n/I don't want them as individual commits - I want one commit. \"},{\"pos\":2399524,\"text\":\"We can achieve this using the letter s (for squash). \"},{\"pos\":2563603,\"text\":\"/n//n//co/git config --global alias.lol \\\"log --graph --all --decorate --oneline\\\"/\"},{\"pos\":2587444,\"text\":\"This creates an alias command called lol for command specified in quotes globally. \"},{\"pos\":2604423,\"text\":\"/n//co/git lol/\"},{\"pos\":2615164,\"text\":\"/n//n//co/git lol --stat/\"},{\"pos\":2623164,\"text\":\"Additional commands can be supplied after the alias. \"},{\"pos\":2658224,\"text\":\"/n/<span class=\\\"t\\\">What is the difference between reset origin master and reset hard origin master?</span>\"},{\"pos\":2698203,\"text\":\"reset origin/master is saying throw away all commits but retain the files that were introduced. \"},{\"pos\":2771284,\"text\":\"reset hard - you don't care about what the changes are, what you are rewinding to. You don't even care to keep what's modified. \"},{\"pos\":2803324,\"text\":\"It is a stringent command and wipes everything clean. \"},{\"pos\":2904564,\"text\":\"/n/<span class=\\\"t\\\">Can you only revert head commit?</span>\"},{\"pos\":2915080,\"text\":\"It is good to be careful what you are reverting. \"},{\"pos\":2921680,\"text\":\"Revert is the safest way you can undo a change and continue to have history moving forward. \"},{\"pos\":2946503,\"text\":\"I can grab a specific commitref and revert to that. \"},{\"pos\":3020003,\"text\":\"/n/<span class=\\\"t\\\">Would you show us how to commit a single change through the command line?</span>\"},{\"pos\":3098743,\"text\":\"/co/git commit -m \\\"message\\\"/\"},{\"pos\":3112483,\"text\":\"Add a single commit. \"},{\"pos\":3175983,\"text\":\"/n/Thank you.\"}]","css":".t{font-weight:bold;}.t:before{content:\"\\A\";white-space: pre;}.t:after{content:\"\\A\";white-space: pre;}\n.co{background-color: #d9534f;display: inline;padding: .2em .6em .3em;font-size: 75%;font-weight: 700;line-height: 1;color: #fff;text-align: center;vertical-align: baseline;border-radius: .25em;box-sizing: border-box; margin-right:5px;}","videoid":"W39CfI3-JFc","title":"Webcast • Undo, Redo & Rebase Your Git History • May 2014","duration":3228.710634920635,"category":"GitHub Training"}