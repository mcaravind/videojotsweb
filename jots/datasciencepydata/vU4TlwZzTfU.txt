{"text":"[{\"pos\":63644,\"text\":\"We have Radim Rehurek. \"},{\"pos\":102844,\"text\":\"/n/<span class=\\\"t\\\">Google's word2vec</span>\"},{\"pos\":149345,\"text\":\"There is no manual input\"},{\"pos\":162520,\"text\":\"/n/Unsupervised deep learning\"},{\"pos\":171777,\"text\":\"/n/It needs a lot of data to do this\"},{\"pos\":202319,\"text\":\"/n/This talk is about implementation\"},{\"pos\":233233,\"text\":\"/n/The code is written in C, very optimized, but hard to read and optimize\"},{\"pos\":254607,\"text\":\"/n/I ported it to Python to understand the code better. \"},{\"pos\":258222,\"text\":\"<span class=\\\"t\\\">streaming (generator) for input</span>\"},{\"pos\":263490,\"text\":\"I put a nicer interface. \"},{\"pos\":299987,\"text\":\"Connected to that, you can use the whole ecosystem of Python. \"},{\"pos\":358961,\"text\":\"/n/<span class=\\\"t\\\">NumPy</span>\"},{\"pos\":363436,\"text\":\"My port used NumPy which is the standard in the Python world. \"},{\"pos\":391319,\"text\":\"I was pretty happy with the result. \"},{\"pos\":400585,\"text\":\"But it was still 20 times slower than the C implementation. \"},{\"pos\":413741,\"text\":\"/n/<span class=\\\"t\\\">Cython</span>\"},{\"pos\":417310,\"text\":\"I had to translate some Python back to C. \"},{\"pos\":425454,\"text\":\"But it is a HPC application, tiny core which takes a lot of time and the rest doesn't consume much. \"},{\"pos\":444440,\"text\":\"After some profiling and debugging, I managed to match the speed of the C implementation. \"},{\"pos\":475051,\"text\":\"/n/<span class=\\\"t\\\">BLAS</span>\"},{\"pos\":482014,\"text\":\"Basic Linear Algebra Subroutines\"},{\"pos\":528891,\"text\":\"/n/I translated the core routine into using these BLAS. \"},{\"pos\":566399,\"text\":\"/n/<span class=\\\"t\\\">Benchmark</span>\"},{\"pos\":588507,\"text\":\"Optimized NumPy can still be optimized by about two orders of magnitude. \"},{\"pos\":703387,\"text\":\"/n/<span class=\\\"t\\\">Diagram explaining implementation</span>\"},{\"pos\":777408,\"text\":\"The sentences come from a stream - there is no seeking to middle of sentences. \"},{\"pos\":818386,\"text\":\"/n/<span class=\\\"t\\\">Worker threads</span>\"},{\"pos\":863554,\"text\":\"The port has slightly better accuracy too. \"},{\"pos\":890384,\"text\":\"/n/<span class=\\\"t\\\">not so good</span>\"},{\"pos\":896360,\"text\":\"Cython memoryviews - did not perform as well as plain pointers. \"},{\"pos\":916264,\"text\":\"/n/Cython's dynamic compliation doesn't work as expected\"},{\"pos\":964292,\"text\":\"/n/BLAS idiosyncracies\"},{\"pos\":1055138,\"text\":\"/n/Python 3 compatibility\"},{\"pos\":1080039,\"text\":\"/n/<span class=\\\"t\\\">Conclusion slide</span>\"},{\"pos\":1167401,\"text\":\"<span class=\\\"t\\\">Questions</span>\"},{\"pos\":1176245,\"text\":\"<span class=\\\"t\\\">Memory usage - is this linear growth?</span>\"},{\"pos\":1206101,\"text\":\"It takes about double the amount of memory. \"},{\"pos\":1243312,\"text\":\"/n/<span class=\\\"t\\\">Have you tried numba?</span>\"},{\"pos\":1322071,\"text\":\"<span class=\\\"t\\\">Engineering performant code for deployment scenarios? Tradeoff between speed and maintainability?</span>\"},{\"pos\":1348645,\"text\":\"The tradeoff I make is - depends on how much performance it gets. \"},{\"pos\":1476276,\"text\":\"/n/<span class=\\\"t\\\">You mentioned gensim. Can you tell us more about it?</span>\"},{\"pos\":1488759,\"text\":\"Gensim is a tool for large scale semantic modeling - I am the author. \"},{\"pos\":1546179,\"text\":\"/n/<span class=\\\"t\\\">Correctness of the code - can you tell us about your test strategy?</span>\"},{\"pos\":1578149,\"text\":\"It was a bit easier than usual academic papers. \"},{\"pos\":1590349,\"text\":\"We already had a reference implementation. \"},{\"pos\":1598366,\"text\":\"Testing can be done by comparing how it works with word2vec. \"},{\"pos\":1625266,\"text\":\"Mostly standard unit testing stuff. \"}]","css":".t{font-weight:bold;}.t:before{content:\"\\A\";white-space: pre;}.t:after{content:\"\\A\";white-space: pre;}","videoid":"vU4TlwZzTfU","title":"Radim Řehůřek - Faster than Google? Optimization lessons in Python.","duration":1650.126076,"category":"Data Science PyData","pageName":"python_optimization_lessons.html"}